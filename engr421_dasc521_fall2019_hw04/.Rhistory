clear
x_Data <- read.csv('hw01_images.csv', header = FALSE)
y_Data <- read.csv('hw01_labels.csv', header = FALSE)
#plyr is a tool for a big data structure into homogenous pieces
require(plyr)
yData$col1 <- mapvalues(yData$col1,from=c('1','2'),to=c(1,2))
# I did the train and test split of x,y datasets
gender_x_training_Data <- x_Data[1:200, ]
gender_y_training_Label <- data.frame(y_Data[1:200, ])
colnames(gender_y_training_Label) <- 'label'
gender_x_test_Data <- x_Data[201:400, ]
gender_y_test_Label <- data.frame(y_Data[201:400, ])
colnames(gender_y_test_Label) <- 'label'
x_Data <- read.csv('hw01_images.csv', header = FALSE)
y_Data <- read.csv('hw01_labels.csv', header = FALSE)
#plyr is a tool for a big data structure into homogenous pieces
require(plyr)
yData$col1 <- mapvalues(yData$col1,from=c('1','2'),to=c(1,2))
# I did the train and test split of x,y datasets
gender_x_training_Data <- x_Data[1:200, ]
gender_y_training_Label <- data.frame(y_Data[1:200, ])
colnames(gender_y_training_Label) <- 'label'
gender_x_test_Data <- x_Data[201:400, ]
gender_y_test_Label <- data.frame(y_Data[201:400, ])
colnames(gender_y_test_Label) <- 'label'
x_Data <- read.csv('hw01_images.csv', header = FALSE)
x_Data <- read.csv('/hw01_images.csv', header = FALSE)
x_Data <- read.csv('hw01_images.csv', header = FALSE)
x_Data <- read.csv('/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0/1hw01_images.csv', header = FALSE)
x <- 5
x_Data <- read.csv('/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0/1hw01_images.csv', header = FALSE)
x_Data <- read.csv('/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0/hw01_images.csv', header = FALSE)
setwd('/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0')
clear
x
setwd("/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0")
setwd("/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0/")
setwd("/home/emre/Documents/MachineLearningCourse/engr421_dasc521_fall2019_hw0/")
y_Data <- read.csv('hw01_labels.csv', header = FALSE)
y_Data <- read.csv('hw01_labels.csv', header = FALSE)
setwd('/home/emre/Documents/CollegeFiles/COMP421/MachineLearningCourse/engr421_dasc521_fall2019_hw04')
data <- read.csv('hw04_data_set.csv')
#split data into trest and training data
training_data <- data[1:150,]
test_data <- data[151:272,]
regressogram_function <- function(origin,bin_width,x_maximum,regressogram_data){
x_data <- regressogram_data$x
y_data <- regressogram_data$y
x_distance <- x_data - origin
bin_number <- ceiling(x_distance / bin_width)
regressogram_data <- cbind(regressogram_data, bin_number)
bin_averages<- aggregate(x = y_data, by = list(regressogram_data$bin_number),FUN = mean)
colnames(bin_averages) <- c('bin_number', 'bin_mean')
n <- (x_maximum - origin) / bin_width
for(i in 1:n){
if(!any(bin_averages$bin_number == i)){
bin_averages<- rbind(bin_averages, c(i, 0.0))
}
}
return (bin_averages[with(bin_averages, order(bin_number)), ])
}
training_regressogram<-regressogram_function(origin, bin_width,x_maximum,training_data)
bin_width <- 0.37
origin <- 1.5
x_maximum <- 5
training_regressogram<-regressogram_function(origin, bin_width,x_maximum,training_data)
regressogram_function <- function(origin,bin_width,x_maximum,reg_data){
x_data <- regressogram_data$x
y_data <- regressogram_data$y
x_distance <- x_data - origin
bin_number <- ceiling(x_distance / bin_width)
regressogram_data <- cbind(reg_data, bin_number)
bin_averages<- aggregate(x = y_data, by = list(regressogram_data$bin_number),FUN = mean)
colnames(bin_averages) <- c('bin_number', 'bin_mean')
n <- (x_maximum - origin) / bin_width
for(i in 1:n){
if(!any(bin_averages$bin_number == i)){
bin_averages<- rbind(bin_averages, c(i, 0.0))
}
}
return (bin_averages[with(bin_averages, order(bin_number)), ])
}
training_regressogram<-regressogram_function(origin, bin_width,x_maximum,training_data)
x_data <- regressogram_data$x
y_data <- regressogram_data$y
x_distance <- x_data - origin
bin_number <- ceiling(x_distance / bin_width)
regressogram_function <- function(origin,bin_width,x_maximum,reg_data){
x_data <- reg_data$x
y_data <- reg_data$y
x_distance <- x_data - origin
bin_number <- ceiling(x_distance / bin_width)
regressogram_data <- cbind(reg_data, bin_number)
bin_averages<- aggregate(x = regressogram_data$y, by = list(regressogram_data$bin_number),FUN = mean)
colnames(bin_averages) <- c('bin_number', 'bin_mean')
n <- (x_maximum - origin) / bin_width
for(i in 1:n){
if(!any(bin_averages$bin_number == i)){
bin_averages<- rbind(bin_averages, c(i, 0.0))
}
}
return (bin_averages[with(bin_averages, order(bin_number)), ])
}
training_regressogram<-regressogram_function(origin, bin_width,x_maximum,training_data)
plot(x = training_data$x,
y = training_data$y,
xlab = 'x',
ylab = 'y',
type = 'p',
pch = 20,
col = 'blue',
xlim = c(origin, x_maximum))
training_regressogram<-regressogram_function(origin, bin_width,x_maximum,training_data)
training_regressogram<-regressogram_function(origin, bin_width,x_maximum,training_data)
#read data
setwd('/home/emre/Documents/CollegeFiles/COMP421/MachineLearningCourse/engr421_dasc521_fall2019_hw04')
data <- read.csv('hw04_data_set.csv')
#split data into trest and training data
training_data <- data[1:150,]
test_data <- data[151:272,]
#parameters for regressogram
bin_width <- 0.37
origin <- 1.5
x_maximum <- 5
regressogram <- function(data, bin_width, origin, x_max){
bin_number <- ceiling((data$x - origin) / bin_width)
regressogram_data <- cbind(data, bin_number)
bin_means <- aggregate(x = regressogram_data$y,
by = list(regressogram_data$bin_number),
FUN = mean)
colnames(bin_means) <- c('bin_number', 'bin_mean')
n <- (x_max - origin) / bin_width
for(i in 1:n){
if(!any(bin_means$bin_number == i)){
bin_means <- rbind(bin_means, c(i, 0.0))
}
}
return (bin_means[with(bin_means, order(bin_number)), ])
}
training_regressogram<-regressogram(training_data, bin_width,origin,x_maximum)
bin_number <- ceiling((training_data$x - origin) / bin_width)
training_data$x - origin
numbers <- training_data$x - origin
regressogram <- function(data, bin_width, origin, x_max){
bin_number <- ceiling((data$x - origin) / bin_width)
regressogram_data <- cbind(data, bin_number)
bin_means <- aggregate(x = regressogram_data$y,
by = list(regressogram_data$bin_number),
FUN = mean)
colnames(bin_means) <- c('bin_number', 'bin_mean')
n <- (x_max - origin) / bin_width
for(i in 1:n){
if(!any(bin_means$bin_number == i)){
bin_means <- rbind(bin_means, c(i, 0.0))
}
}
return (bin_means[with(bin_means, order(bin_number)), ])
}
training_data <- data[1:100,]
test_data <- data[100:272,]
training_regressogram<-regressogram(training_data, bin_width,origin,x_maximum)
View(data)
data$x
data <- read.csv('hw04_data_set.csv')
data$x
dummy<-data$x
regressogram <- function(data, bin_width, origin, x_max){
bin_number <- ceiling((data$x - origin) / bin_width)
regressogram_data <- cbind(data, bin_number)
bin_means <- aggregate(x = regressogram_data$y,
by = list(regressogram_data$bin_number),
FUN = mean)
colnames(bin_means) <- c('bin_number', 'bin_mean')
n <- (x_max - origin) / bin_width
for(i in 1:n){
if(!any(bin_means$bin_number == i)){
bin_means <- rbind(bin_means, c(i, 0.0))
}
}
return (bin_means[with(bin_means, order(bin_number)), ])
}
training_regressogram<-regressogram(training_data, bin_width,origin,x_maximum)
data$eruptions
regressogram <- function(data, bin_width, origin, x_max){
bin_number <- ceiling((data$eruptions - origin) / bin_width)
regressogram_data <- cbind(data, bin_number)
bin_means <- aggregate(x = regressogram_data$waiting,
by = list(regressogram_data$bin_number),
FUN = mean)
colnames(bin_means) <- c('bin_number', 'bin_mean')
n <- (x_max - origin) / bin_width
for(i in 1:n){
if(!any(bin_means$bin_number == i)){
bin_means <- rbind(bin_means, c(i, 0.0))
}
}
return (bin_means[with(bin_means, order(bin_number)), ])
}
training_regressogram<-regressogram(training_data, bin_width,origin,x_maximum)
plot(x = training_data$x,
y = training_data$y,
xlab = 'x',
ylab = 'y',
type = 'p',
pch = 20,
col = 'blue',
xlim = c(origin, x_maximum))
points(x = test_data$x,
y = test_data$y,
type = 'p',
pch = 20,
col = 'red')
mock_data <- data.frame(1:x_maximum)
mock_data <- cbind(mock_data,as.vector(t(matrix(rep(train_data_regressogram$bin_mean,bin_width),nrow = (x_maximum / bin_width)))))
colnames(mock_data) <- c('x', 'bin_mean')
lines(x = mock_data$x,
y = mock_data$bin_mean,
xlab = 'x',
ylab = 'y',
type = 'S')
title(main = 'Regressogram with h = 3')
legend(x = max(data$x) + 4.8, y= max(data$y) + 8, legend = c('training', 'test'),
col = c('blue', 'red'), pch = 20, xjust = 1, yjust = 1)
plot(x = training_data$eruptions,
y = training_data$waiting,
xlab = 'x',
ylab = 'y',
type = 'p',
pch = 20,
col = 'blue',
xlim = c(origin, x_maximum))
points(x = test_data$eruptions,
y = test_data$waiting,
type = 'p',
pch = 20,
col = 'red')
mock_data <- data.frame(1:x_maximum)
mock_data <- cbind(mock_data,as.vector(t(matrix(rep(training_regressogram$bin_mean,bin_width),nrow = (x_maximum / bin_width)))))
colnames(mock_data) <- c('x', 'bin_mean')
lines(x = mock_data$x,
y = mock_data$bin_mean,
xlab = 'x',
ylab = 'y',
type = 'S')
title(main = 'Regressogram with h = 3')
legend(x = max(data$eruptions) + 4.8, y= max(data$waiting) + 8, legend = c('training', 'test'),
col = c('blue', 'red'), pch = 20, xjust = 1, yjust = 1)
